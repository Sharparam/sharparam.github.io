---
import type { ImageMetadata } from "astro";
import { site } from "../consts";

type Image = {
  src: string | ImageMetadata;
  alt: string;
};

type SEOMetadata = {
  name?: string | undefined;
  title: string;
  description: string;
  author?: string | undefined;
  image?: Image | undefined;
  canonicalURL?: URL | string | undefined;
  locale?: string;
  pubDate?: Date | undefined;
  updatedDate?: Date | undefined;
};

type OpenGraph = Partial<SEOMetadata> & {
  type?: string;
};

type Twitter = Partial<SEOMetadata> & {
  handle?: string;
  card?: "summary" | "summary_large_image";
};

export type Props = SEOMetadata & {
  og?: OpenGraph;
  twitter?: Twitter;
};

const {
  name = site.title,
  title,
  description,
  author = site.author.name,
  image,
  locale = site.locale,
  canonicalURL = new URL(Astro.url.pathname, Astro.site),
  pubDate,
  updatedDate
} = Astro.props;

const og = {
  name,
  title,
  description,
  author,
  canonicalURL,
  image,
  locale,
  pubDate,
  updatedDate,
  type: "website",
  ...(Astro.props.og ?? {})
} satisfies OpenGraph;

const twitter = {
  name,
  title,
  description,
  canonicalURL,
  image,
  locale,
  card: "summary_large_image",
  ...Astro.props.twitter
};

function normalizeImageUrl(image: string | ImageMetadata) {
  return typeof image === "string" ? image : image.src;
}
---

<!-- Page Metadata -->
<link rel="canonical" href={canonicalURL} />
<meta name="description" content={description} />
{
  author && (
    <>
      <meta name="author" content={author} />
      <meta name="creator" content={author} />
      <meta name="publisher" content={author} />
    </>
  )
}

<!-- OpenGraph Tags -->
<meta property="og:title" content={og.title} />
<meta property="og:type" content={og.type} />
<meta property="og:url" content={canonicalURL} />
<meta property="og:locale" content={og.locale} />
<meta property="og:description" content={og.description} />
<meta property="og:site_name" content={og.name} />
{
  og.image && (
    <meta property="og:image" content={normalizeImageUrl(og.image.src)} />
  )
}
{og.image && <meta property="og:image:alt" content={og.image.alt} />}
{
  og.type === "article" && (
    <>
      {/*og.author && <meta property="article:author" content={og.author} />*/}
      {og.pubDate && (
        <meta
          property="article:published_time"
          content={og.pubDate.toISOString()}
        />
      )}
      {og.updatedDate && (
        <meta
          property="article:modified_time"
          content={og.updatedDate.toISOString()}
        />
      )}
    </>
  )
}

<!-- Twitter Tags -->
<meta name="twitter:card" content={twitter.card} />
<meta name="twitter:site" content={twitter.handle} />
<meta name="twitter:title" content={twitter.title} />
<meta name="twitter:description" content={twitter.description} />
{
  twitter.image && (
    <meta name="twitter:image" content={normalizeImageUrl(twitter.image.src)} />
  )
}
{twitter.image && <meta name="twitter:image:alt" content={twitter.image.alt} />}
